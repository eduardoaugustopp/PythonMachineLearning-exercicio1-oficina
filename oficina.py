# -*- coding: utf-8 -*-
"""oficina.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/146oYkpnZooQqfIlHaRRAqwic2W2iQN6h
"""

# features (1 sim, 0 não)
# Tem quatro rodas?
# Tem portas?
# Usa capacete?

treino_x = [
    [1, 1, 0],  # Carro 1
    [1, 1, 0],  # Carro 2
    [1, 1, 0],  # Carro 3
    [0, 0, 1],  # Moto 1
    [0, 0, 1],  # Moto 2
    [0, 0, 1]   # Moto 3
]

treino_y = [1, 1, 1, 0, 0, 0]  # 1 para Carro, 0 para Motocicleta

from sklearn.svm import LinearSVC

model = LinearSVC()
model.fit(treino_x, treino_y)

veiculo_misterioso = [1, 1, 1]
model.predict([veiculo_misterioso])

misterio1 = [1,1,1]
misterio2 = [1,1,0]
misterio3 = [0,1,1]

teste_x = [misterio1, misterio2, misterio3]
teste_y = [0 , 1, 1]

previsoes = model.predict(teste_x)

corretos = (previsoes == teste_y).sum()
total = len(teste_x)
taxa_de_acerto = corretos/total
print("Taxa de acerto %.2f" % (taxa_de_acerto * 100))

from sklearn.metrics import accuracy_score

taxa_de_acerto = accuracy_score(teste_y, previsoes)
print("Taxa de acerto %.2f" % (taxa_de_acerto * 100))

import numpy as np
import pandas as pd
print('NumPy version:', np.__version__)
print('Pandas version:', pd.__version__)

import pandas as pd

uri = "https://raw.githubusercontent.com/eduardoaugustopp/PythoMachineLearning-exercicio1-oficina/main/banco-de-dados/oficina1.csv"
dados = pd.read_csv(uri)
dados.head()

mapa = {
    "start_service" : "inicio_servico",
    "function_explained" : "funcionamento_explicado",
    "customer_contact" : "contato_cliente",
    "service_purchased" : "servico_comprado"
}
dados = dados.rename(columns = mapa)

x = dados[["inicio_servico","funcionamento_explicado","contato_cliente"]]
x.head()

y = dados["servico_comprado"]
y.head()

dados.shape

treino_x = x[:75]
treino_y = y[:75]
teste_x = x[75:]
teste_y = y[75:]

print("Treinaremos com %d elementos e testaremos com %d elementos" % (len(treino_x), len(teste_x)))

from sklearn.svm import LinearSVC
from sklearn.metrics import accuracy_score

modelo = LinearSVC()
modelo.fit(treino_x, treino_y)
previsoes = modelo.predict(teste_x)

acuracia = accuracy_score(teste_y, previsoes) * 100
print("A acurácia foi %.2f%%" % acuracia)

from sklearn.model_selection import train_test_split
from sklearn.svm import LinearSVC
from sklearn.metrics import accuracy_score

SEED = 20

treino_x, teste_x, treino_y, teste_y = train_test_split(x, y, random_state = SEED, test_size = 0.25)
print("Treinaremos com %d elementos e testaremos com %d elementos" % (len(treino_x), len(teste_x)))

modelo = LinearSVC()
modelo.fit(treino_x, treino_y)
previsoes = modelo.predict(teste_x)

acuracia = accuracy_score(teste_y, previsoes) * 100
print("A acurácia foi %.2f%%" % acuracia)

treino_y.value_counts()

teste_y.value_counts()

from sklearn.model_selection import train_test_split
from sklearn.svm import LinearSVC
from sklearn.metrics import accuracy_score

SEED = 20

treino_x, teste_x, treino_y, teste_y = train_test_split(x, y,
                                                         random_state = SEED, test_size = 0.25,
                                                         stratify = y)
print("Treinaremos com %d elementos e testaremos com %d elementos" % (len(treino_x), len(teste_x)))

modelo = LinearSVC()
modelo.fit(treino_x, treino_y)
previsoes = modelo.predict(teste_x)

acuracia = accuracy_score(teste_y, previsoes) * 100
print("A acurácia foi %.2f%%" % acuracia)

treino_y.value_counts()

teste_y.value_counts()

!pip install seaborn==0.9.0

import pandas as pd

uri = "https://raw.githubusercontent.com/eduardoaugustopp/PythoMachineLearning-exercicio1-oficina/main/banco-de-dados/oficina2.csv"
dados = pd.read_csv(uri)
dados.head()

a_renomear = {
    'pending_service' : 'serviço_pendente',
    'estimated_hours' : 'horas_orçadas',
    'estimated_cost' : 'custo_estimado'
}
dados = dados.rename(columns = a_renomear)
dados.head()

troca = {
    0 : 1,
    1 : 0
}
dados['pendente'] = dados.serviço_pendente.map(troca)
dados.head()

dados.tail()

import seaborn as sns

sns.scatterplot(x="horas_orçadas", y="custo_estimado", data=dados)

sns.scatterplot(x="horas_orçadas", y="custo_estimado", hue="pendente", data=dados)

sns.relplot(x="horas_orçadas", y="custo_estimado", hue="pendente", col="pendente", data=dados)

x = dados[['horas_orçadas', 'custo_estimado']]
y = dados['pendente']

from sklearn.model_selection import train_test_split
from sklearn.model_selection import train_test_split
from sklearn.svm import LinearSVC
from sklearn.metrics import accuracy_score

SEED = 5
np.random.seed(SEED)
treino_x, teste_x, treino_y, teste_y = train_test_split(x, y, test_size = 0.25,
                                                         stratify = y)
print("Treinaremos com %d elementos e testaremos com %d elementos" % (len(treino_x), len(teste_x)))

modelo = LinearSVC()
modelo.fit(treino_x, treino_y)
previsoes = modelo.predict(teste_x)

acuracia = accuracy_score(teste_y, previsoes) * 100
print("A acurácia foi %.2f%%" % acuracia)

import numpy as np
previsoes_de_base = np.ones(540)
acuracia = accuracy_score(teste_y, previsoes_de_base) * 100
print("A acurácia do algoritmo de baseline foi %.2f%%" % acuracia)

sns.scatterplot(x="horas_orçadas", y="custo_estimado", hue=teste_y, data=teste_x)

x_min = teste_x.horas_orçadas.min()
x_max = teste_x.horas_orçadas.max()
y_min = teste_x.custo_estimado.min()
y_max = teste_x.custo_estimado.max()
print(x_min, x_max,y_min,y_max)

pixels = 100
eixo_x = np.arange(x_min, x_max, (x_max - x_min)/ pixels)
eixo_y = np.arange(y_min, y_max, (y_max - y_min)/ pixels)

xx, yy = np.meshgrid(eixo_x, eixo_y)
xx

xx, yy = np.meshgrid(eixo_x, eixo_y)
xx.ravel()

xx, yy = np.meshgrid(eixo_x, eixo_y)
pontos = np.c_[xx.ravel(), yy.ravel()]
pontos

Z = modelo.predict(pontos)
Z.shape

xx.shape

Z = modelo.predict(pontos)
Z = Z.reshape(xx.shape)
Z

import matplotlib.pyplot as plt

plt.scatter(teste_x.horas_orçadas, teste_x.custo_estimado, c=teste_y)

import matplotlib.pyplot as plt

plt.scatter(teste_x.horas_orçadas, teste_x.custo_estimado, c=teste_y, s=1)

import matplotlib.pyplot as plt

plt.contourf(xx, yy, Z, alpha=0.3)
plt.scatter(teste_x.horas_orçadas, teste_x.custo_estimado, c=teste_y, s=1)

from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

SEED = 5
np.random.seed(SEED)
treino_x, teste_x, treino_y, teste_y = train_test_split(x, y, test_size = 0.25,
                                                         stratify = y)
print("Treinaremos com %d elementos e testaremos com %d elementos" % (len(treino_x), len(teste_x)))

modelo = SVC()
modelo.fit(treino_x, treino_y)
previsoes = modelo.predict(teste_x)

acuracia = accuracy_score(teste_y, previsoes) * 100
print("A acurácia foi %.2f%%" % acuracia)

x_min = teste_x.horas_orçadas.min()
x_max = teste_x.horas_orçadas.max()
y_min = teste_x.custo_estimado.min()
y_max = teste_x.custo_estimado.max()

pixels = 100
eixo_x = np.arange(x_min, x_max, (x_max - x_min) / pixels)
eixo_y = np.arange(y_min, y_max, (y_max - y_min) / pixels)

xx, yy = np.meshgrid(eixo_x, eixo_y)
pontos = np.c_[xx.ravel(), yy.ravel()]

Z = modelo.predict(pontos)
Z = Z.reshape(xx.shape)

import matplotlib.pyplot as plt

plt.contourf(xx, yy, Z, alpha=0.3)
plt.scatter(teste_x.horas_orçadas, teste_x.custo_estimado, c=teste_y, s=1)

from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

SEED = 5
np.random.seed(SEED)
raw_treino_x, raw_teste_x, treino_y, teste_y = train_test_split(x, y, test_size = 0.25,
                                                         stratify = y)
print("Treinaremos com %d elementos e testaremos com %d elementos" % (len(treino_x), len(teste_x)))

scaler = StandardScaler()
scaler.fit(raw_treino_x)
treino_x = scaler.transform(raw_treino_x)
teste_x = scaler.transform(raw_teste_x)

modelo = SVC()
modelo.fit(treino_x, treino_y)
previsoes = modelo.predict(teste_x)

acuracia = accuracy_score(teste_y, previsoes) * 100
print("A acurácia foi %.2f%%" % acuracia)

treino_x

data_x = teste_x[:,0]
data_y = teste_x[:,1]

x_min = data_x.min()
x_max = data_x.max()
y_min = data_y.min()
y_max = data_y.max()

pixels = 100
eixo_x = np.arange(x_min, x_max, (x_max - x_min) / pixels)
eixo_y = np.arange(y_min, y_max, (y_max - y_min) / pixels)

xx, yy = np.meshgrid(eixo_x, eixo_y)
pontos = np.c_[xx.ravel(), yy.ravel()]

Z = modelo.predict(pontos)
Z = Z.reshape(xx.shape)

import matplotlib.pyplot as plt

plt.contourf(xx, yy, Z, alpha=0.3)
plt.scatter(data_x, data_y, c=teste_y, s=1)